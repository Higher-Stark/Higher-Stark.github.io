{"title":"Max Subarray","slug":"Max-Subarray","date":"2018-10-26T10:29:58.000Z","updated":"2018-10-26T11:49:16.636Z","comments":true,"path":"api/articles/Max-Subarray.json","photos":[],"link":"","excerpt":"寻找数组A的和最大的非空连续子数组(maxium subarray)","covers":null,"content":"<p>寻找数组A的和最大的非空连续子数组(maxium subarray)</p>\n<a id=\"more\"></a>\n<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [<span class=\"string\">-2</span>,1,<span class=\"string\">-3</span>,4,<span class=\"string\">-1</span>,2,1,<span class=\"string\">-5</span>,4],</span><br><span class=\"line\">Output: 6</span><br><span class=\"line\">Explanation: [4,<span class=\"string\">-1</span>,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><ul>\n<li><p>Solution 1</p>\n<p>  《算法导论》4.1节拿这个最大子串的问题为例，介绍了一下分治法，思路是将一个字符串分成两个子串，这个最大子串要不是左子串的最大子串，或者是右子串的最大子串，再者就是跨左右两个子串的一个子串。<br>  寻找左右子串的最大子串只需要递归地做，寻找横跨左右子串的最大子串就乖乖地从中间向两边延伸，找到最大的子串。<br>  对于含有n个整数的数组而言，函数的运行时间<code>T(n)=2θ(n/2)+n</code>，时间复杂度为<code>θ(nlogn)</code>。</p>\n<p>  <em>代码暂时未提供</em></p>\n</li>\n<li><p>Solution 2</p>\n<p>  《算法导论》4.1-5习题提供了一个非递归的、线性时间算法的思路。<br>  如果已知<code>A[1..j]</code>的最大子串，那么<code>A[1..j+1]</code>的最大子串，要不是<code>A[1..j]</code>的最大子串，要不就是<code>A[i..j+1] (1 ≤ i ≤ j+1)</code>。<br>  这个算法只需要遍历一遍数组就能找到最大子串，时间复杂度为<code>θ(n)</code>。</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当前最大子串开始、末尾和子串和</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> maxStart = <span class=\"number\">0</span>, maxEnd = <span class=\"number\">0</span>, maxSum = nums[<span class=\"number\">0</span>];、</span><br><span class=\"line\">            <span class=\"comment\">// 当前已扫描子串从末尾开始的最大子串和子串和</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tailStart = <span class=\"number\">0</span>, tailEnd = <span class=\"number\">0</span>, tailSum = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i != nums.size(); i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 末尾最大子串如果小于0且子串和小于下一个数，</span></span><br><span class=\"line\">                <span class=\"comment\">// 抛弃原来的最大子串</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tailSum &lt; <span class=\"number\">0</span> &amp;&amp; tailSum &lt; nums[i]) &#123;</span><br><span class=\"line\">                    tailStart = i;</span><br><span class=\"line\">                    tailEnd = i;</span><br><span class=\"line\">                    tailSum = nums[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 不然将下一个数加到末尾最大子串中</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    tailEnd = i;</span><br><span class=\"line\">                    tailSum += nums[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tailSum &gt; maxSum) &#123;</span><br><span class=\"line\">                    maxStart = tailStart;</span><br><span class=\"line\">                    maxEnd = tailEnd;</span><br><span class=\"line\">                    maxSum = tailSum;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>  <em>LeetCode第一次提交有好多行注释掉的代码，跑了8ms，去掉那些后变成了4ms，估计就4-8ms的样子。</em></p>\n</li>\n</ul>\n","categories":[{"name":"Algorithm","slug":"Algorithm","count":3,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"leetcode","slug":"leetcode","count":3,"path":"api/tags/leetcode.json"},{"name":"divide and conquer","slug":"divide-and-conquer","count":1,"path":"api/tags/divide-and-conquer.json"}]}