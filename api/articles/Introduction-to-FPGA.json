{"title":"Introduction to FPGA","slug":"Introduction-to-FPGA","date":"2018-11-05T10:11:43.000Z","updated":"2018-11-14T07:08:29.830Z","comments":true,"path":"api/articles/Introduction-to-FPGA.json","photos":[],"link":"","excerpt":"FPGA 随手记既然有上手FPGA开发板的机会，那就好好体验一下，随手记一些，方便自己翻阅 [Figure] ","covers":["../static/images/FPGAs-Icon_4x.jpg","../static/images/DE1-SoC_Getting_Started_Guide.jpg"],"content":"<h2 id=\"FPGA-随手记\"><a href=\"#FPGA-随手记\" class=\"headerlink\" title=\"FPGA 随手记\"></a>FPGA 随手记</h2><p><em>既然有上手FPGA开发板的机会，那就好好体验一下，随手记一些，方便自己翻阅</em></p>\n<p><img src=\"../static/images/FPGAs-Icon_4x.jpg\" alt=\"FPGA\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Altera-Quartus\"><a href=\"#Altera-Quartus\" class=\"headerlink\" title=\"Altera Quartus\"></a>Altera Quartus</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>现在Altera已经被Intel收购了，原来Altera官方的许多链接都会跳转到Intel。Intel上Altera Quartus的下载页面我看到过两种风格的，不过图-1不是最终界面，点击下载还是会跳转到图-2。<br><img src=\"../static/images/DE1-SoC_Getting_Started_Guide.jpg\" alt=\"Download page 1\"><br>图-1 下载页面<br><img src=\"../static/images/DE1-SoC_Getting_Started_Guide-2.jpg\" alt=\"Download page 2\"><br>图-2 下载页面</p>\n<p>Quartus一直在更新，不过推荐Quartus 13，新版本也可以用，不过安装体积会很大。需要下载的有Quartus的安装程序和嵌入式设计套件。更新包可以不安装。</p>\n<ul>\n<li>Quartus安装路径上不能有空格</li>\n<li>Quartus建议安装到C盘(Windows 用户)(<del>D盘安装据说可能会出问题，我正在冒险</del>)</li>\n<li>Quartus安装后还需要安装驱动，驱动在Quartus安装目录内，quartus/drivers这个文件夹内，需要手动安装，不然开发板连接电脑后电脑无法识别</li>\n</ul>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ol>\n<li><p>Quartus新建项目会弹出“新建项目向导”，确定Device family容易，下面还需要选择available devices，从开发板的SoC上可以找到一串编号，我的是<code>5CSEMA5F31C6N</code>，对应到列表中就是Name为<code>5CSEMA5F31C6</code>的这一条。</p>\n</li>\n<li><p>新建项目完成后创建一个<code>bdf</code>(<code>block diagram fil</code>)文件，作为顶层设计文件。</p>\n</li>\n<li><p>新建一个Verilog文件，就可以开始在里面写Verilog代码了。</p>\n</li>\n<li><p>写完Verilog代码后可以在 <strong>File - Create/Update - Create Symbol file for current file</strong> 为自己的代码文件生成符号</p>\n</li>\n<li><p>在block diagram file里添加Symbol，可以在里面添加自己代码生成的Symbol和Altera自带的Symbol。然后可以将各个Symbol的输入输出进行连线。<br> 对于输入输出：  </p>\n<ul>\n<li>输入： 如板载时钟信号、按键输入，可以添加<strong>Altera库 - primitive - input</strong>这一Symbol，将其输出连线到需要时钟信号组件的时钟输入端。</li>\n<li><p>输出： 如控制LED灯、数码管，添加<strong>Altera库 - primitive - output</strong> Symbol就可以了，将输出信号连到output的输入端。</p>\n<p><em>关于输入输出组件的名字，还没有研究透，目前都是和所连端口的符号保持一致，猜测对后面针脚分配会有关系吧</em></p>\n</li>\n</ul>\n</li>\n<li><p>连线完毕进行下一步<strong>Process - Start - Start analysis and elaboration</strong>，没错的话就可以分配针脚<strong>Assignment - Pin Planner</strong>。<br> Pin Planner内需要对每一个针脚指定对应的location，比如将clk对应的location设为Pin AF14，即板载50MHz时钟的pin（仅以DE1-SOC开发板为例）。具体的Pin因板子而异，具体请参考对应开发板的User Manual。</p>\n</li>\n<li><p>现在就可以进行编译了，<strong>Process - Start Compilation</strong>。(<em>Compilation often takes quite a while, be patient and relax</em>)</p>\n</li>\n<li><p>编译完成后，确保开发板连接到了电脑，打开<strong>Tool - Programmer</strong>，在Hardware Setup中选中你的开发板，接下来Auto detect，在弹出的窗口中选择你的开发板Soc上的编号，如果列表中有编号缺少末尾几位的，无妨。选择你的FPGA芯片，在Change File里选择你编译得到的sof文件（一般在项目文件夹的output文件夹内），点击Start，就可以进行烧录，烧录完，开发板就执行你的程序了。</p>\n</li>\n</ol>\n","categories":[{"name":"FPGA","slug":"FPGA","count":1,"path":"api/categories/FPGA.json"}],"tags":[{"name":"FPGA","slug":"FPGA","count":1,"path":"api/tags/FPGA.json"},{"name":"Altera","slug":"Altera","count":1,"path":"api/tags/Altera.json"}]}