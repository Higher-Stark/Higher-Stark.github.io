{"title":"Number of islands","slug":"Number-of-islands","date":"2018-11-19T11:23:59.000Z","updated":"2018-11-19T15:16:36.350Z","comments":true,"path":"api/articles/Number-of-islands.json","photos":[],"link":"","excerpt":"Number of IslandsProblem DescriptionGiven a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.","covers":null,"content":"<h1 id=\"Number-of-Islands\"><a href=\"#Number-of-Islands\" class=\"headerlink\" title=\"Number of Islands\"></a>Number of Islands</h1><h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><blockquote>\n<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>Example 1:</p>\n<pre><code>Input:\n11110\n11010\n11000\n00000\n\nOutput: 1\n</code></pre><p>Example 2:</p>\n<pre><code>Input:\n11000\n11000\n00100\n00011\n\nOutput: 3\n</code></pre></blockquote>\n<h2 id=\"Problem-Solution\"><a href=\"#Problem-Solution\" class=\"headerlink\" title=\"Problem Solution\"></a>Problem Solution</h2><h3 id=\"Breadth-First-Search\"><a href=\"#Breadth-First-Search\" class=\"headerlink\" title=\"Breadth First Search\"></a>Breadth First Search</h3><ul>\n<li>algorithm logic</li>\n</ul>\n<p>Traverse the grid and push unvisited point into a stack whose value is 1, and mark this point visited. Also increase island count by 1. Before move on to next point, check the stack. If not empty, traverse the grid in BFS.<br>When traversing in BFS, push unvisited point onto the stack whose value is 1 and mark it visited.</p>\n<ul>\n<li>reference code</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">set</span>&lt;<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; visited;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> vbound = grid.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vbound &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hbound = grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hbound &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; \"Grid size: \" &lt;&lt; vbound &lt;&lt; \"x\" &lt;&lt; hbound &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != vbound; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j != hbound; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// if visited, skip</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j)) != visited.end()) </span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"built_in\">queue</span>&lt;<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; q;</span><br><span class=\"line\">                <span class=\"comment\">// if island, counter increase,</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                    cnt++;</span><br><span class=\"line\">                    q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// visit the whole island in BFS</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> size = q.size();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k != size; k++) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; cord = q.front();</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> vidx = get&lt;<span class=\"number\">0</span>&gt;(cord);</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> hidx = get&lt;<span class=\"number\">1</span>&gt;(cord);</span><br><span class=\"line\">                        <span class=\"comment\">// if not visited, add to visited</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (vidx - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx - <span class=\"number\">1</span>, hidx)) == visited.end()) &#123;</span><br><span class=\"line\">                            visited.insert(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx - <span class=\"number\">1</span>, hidx));</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (grid[vidx - <span class=\"number\">1</span>][hidx] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                                q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx - <span class=\"number\">1</span>, hidx));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (hidx - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx - <span class=\"number\">1</span>)) == visited.end()) &#123;</span><br><span class=\"line\">                            visited.insert(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx - <span class=\"number\">1</span>));</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (grid[vidx][hidx - <span class=\"number\">1</span>] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                                q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx - <span class=\"number\">1</span>));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (vidx + <span class=\"number\">1</span> &lt; vbound &amp;&amp; visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx + <span class=\"number\">1</span>, hidx)) == visited.end()) &#123;</span><br><span class=\"line\">                            visited.insert(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx + <span class=\"number\">1</span>, hidx));</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (grid[vidx + <span class=\"number\">1</span>][hidx] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                                q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx + <span class=\"number\">1</span>, hidx));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (hidx + <span class=\"number\">1</span> &lt; hbound &amp;&amp; visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx + <span class=\"number\">1</span>)) == visited.end()) &#123;</span><br><span class=\"line\">                            visited.insert(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx + <span class=\"number\">1</span>));</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (grid[vidx][hidx + <span class=\"number\">1</span>] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                                q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx + <span class=\"number\">1</span>));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        q.pop();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Depth-First-Search\"><a href=\"#Depth-First-Search\" class=\"headerlink\" title=\"Depth First Search\"></a>Depth First Search</h3><ul>\n<li>algorithm logic</li>\n</ul>\n<p>Quite similiar to BFS, traverse the grid from the top down and from left to right. Once a land is found, find the whole island.  </p>\n<ul>\n<li>reference code</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">set</span>&lt;<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; visited;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> vbound = grid.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vbound &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hbound = grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hbound &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; \"Grid size: \" &lt;&lt; vbound &lt;&lt; \"x\" &lt;&lt; hbound &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != vbound; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j != hbound; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// if visited, skip</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j)) != visited.end()) </span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"built_in\">std</span>::<span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; q;</span><br><span class=\"line\">                <span class=\"comment\">// if island, counter increase,</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                    cnt++;</span><br><span class=\"line\">                    q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// visit the whole island in DFS</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// int size = q.size();</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// for (int k = 0; k != size; k++) &#123;</span></span><br><span class=\"line\">                    <span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; cord = q.top();</span><br><span class=\"line\">                    q.pop();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> vidx = get&lt;<span class=\"number\">0</span>&gt;(cord);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> hidx = get&lt;<span class=\"number\">1</span>&gt;(cord);</span><br><span class=\"line\">                    <span class=\"comment\">// if not visited, add to visited</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (vidx - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx - <span class=\"number\">1</span>, hidx)) == visited.end()) &#123;</span><br><span class=\"line\">                        visited.insert(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx - <span class=\"number\">1</span>, hidx));</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (grid[vidx - <span class=\"number\">1</span>][hidx] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                            q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx - <span class=\"number\">1</span>, hidx));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hidx - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx - <span class=\"number\">1</span>)) == visited.end()) &#123;</span><br><span class=\"line\">                        visited.insert(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx - <span class=\"number\">1</span>));</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (grid[vidx][hidx - <span class=\"number\">1</span>] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                            q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx - <span class=\"number\">1</span>));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (vidx + <span class=\"number\">1</span> &lt; vbound &amp;&amp; visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx + <span class=\"number\">1</span>, hidx)) == visited.end()) &#123;</span><br><span class=\"line\">                        visited.insert(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx + <span class=\"number\">1</span>, hidx));</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (grid[vidx + <span class=\"number\">1</span>][hidx] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                            q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx + <span class=\"number\">1</span>, hidx));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hidx + <span class=\"number\">1</span> &lt; hbound &amp;&amp; visited.find(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx + <span class=\"number\">1</span>)) == visited.end()) &#123;</span><br><span class=\"line\">                        visited.insert(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx + <span class=\"number\">1</span>));</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (grid[vidx][hidx + <span class=\"number\">1</span>] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                            q.push(<span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(vidx, hidx + <span class=\"number\">1</span>));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","categories":[{"name":"Algorithm","slug":"Algorithm","count":3,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"leetcode","slug":"leetcode","count":3,"path":"api/tags/leetcode.json"},{"name":"DFS","slug":"DFS","count":2,"path":"api/tags/DFS.json"},{"name":"BFS","slug":"BFS","count":1,"path":"api/tags/BFS.json"}]}